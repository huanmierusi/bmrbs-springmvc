/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (MrbsUser.as).
 */

package com.baidu.ite.mrbs.entity {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class MrbsUserBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _assistant:Boolean;
        private var _department:String;
        private var _email:String;
        private var _hi:String;
        private var _id:Number;
        private var _loginName:String;
        private var _mrbsSchedules:ListCollectionView;
        private var _name:String;
        private var _password:String;
        private var _pods:ListCollectionView;
        private var _roles:ListCollectionView;
        private var _status:Number;
        private var _tel:String;
        private var _viewChoice:String;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is MrbsUser) || (property as MrbsUser).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function set assistant(value:Boolean):void {
            _assistant = value;
        }
        public function get assistant():Boolean {
            return _assistant;
        }

        public function set department(value:String):void {
            _department = value;
        }
        public function get department():String {
            return _department;
        }

        public function set email(value:String):void {
            _email = value;
        }
        public function get email():String {
            return _email;
        }

        public function set hi(value:String):void {
            _hi = value;
        }
        public function get hi():String {
            return _hi;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        public function get id():Number {
            return _id;
        }

        public function set loginName(value:String):void {
            _loginName = value;
        }
        public function get loginName():String {
            return _loginName;
        }

        public function set mrbsSchedules(value:ListCollectionView):void {
            _mrbsSchedules = value;
        }
        public function get mrbsSchedules():ListCollectionView {
            return _mrbsSchedules;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set password(value:String):void {
            _password = value;
        }
        public function get password():String {
            return _password;
        }

        public function set pods(value:ListCollectionView):void {
            _pods = value;
        }
        public function get pods():ListCollectionView {
            return _pods;
        }

        public function set roles(value:ListCollectionView):void {
            _roles = value;
        }
        public function get roles():ListCollectionView {
            return _roles;
        }

        public function set status(value:Number):void {
            _status = value;
        }
        public function get status():Number {
            return _status;
        }

        public function set tel(value:String):void {
            _tel = value;
        }
        public function get tel():String {
            return _tel;
        }

        public function set viewChoice(value:String):void {
            _viewChoice = value;
        }
        public function get viewChoice():String {
            return _viewChoice;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:MrbsUserBase = MrbsUserBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._assistant, _assistant, null, this, 'assistant', function setter(o:*):void{_assistant = o as Boolean});
               em.meta_mergeExternal(src._department, _department, null, this, 'department', function setter(o:*):void{_department = o as String});
               em.meta_mergeExternal(src._email, _email, null, this, 'email', function setter(o:*):void{_email = o as String});
               em.meta_mergeExternal(src._hi, _hi, null, this, 'hi', function setter(o:*):void{_hi = o as String});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._loginName, _loginName, null, this, 'loginName', function setter(o:*):void{_loginName = o as String});
               em.meta_mergeExternal(src._mrbsSchedules, _mrbsSchedules, null, this, 'mrbsSchedules', function setter(o:*):void{_mrbsSchedules = o as ListCollectionView});
               em.meta_mergeExternal(src._name, _name, null, this, 'name', function setter(o:*):void{_name = o as String});
               em.meta_mergeExternal(src._password, _password, null, this, 'password', function setter(o:*):void{_password = o as String});
               em.meta_mergeExternal(src._pods, _pods, null, this, 'pods', function setter(o:*):void{_pods = o as ListCollectionView});
               em.meta_mergeExternal(src._roles, _roles, null, this, 'roles', function setter(o:*):void{_roles = o as ListCollectionView});
               em.meta_mergeExternal(src._status, _status, null, this, 'status', function setter(o:*):void{_status = o as Number});
               em.meta_mergeExternal(src._tel, _tel, null, this, 'tel', function setter(o:*):void{_tel = o as String});
               em.meta_mergeExternal(src._viewChoice, _viewChoice, null, this, 'viewChoice', function setter(o:*):void{_viewChoice = o as String});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _assistant = input.readObject() as Boolean;
                _department = input.readObject() as String;
                _email = input.readObject() as String;
                _hi = input.readObject() as String;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _loginName = input.readObject() as String;
                _mrbsSchedules = input.readObject() as ListCollectionView;
                _name = input.readObject() as String;
                _password = input.readObject() as String;
                _pods = input.readObject() as ListCollectionView;
                _roles = input.readObject() as ListCollectionView;
                _status = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _tel = input.readObject() as String;
                _viewChoice = input.readObject() as String;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_assistant is IPropertyHolder) ? IPropertyHolder(_assistant).object : _assistant);
                output.writeObject((_department is IPropertyHolder) ? IPropertyHolder(_department).object : _department);
                output.writeObject((_email is IPropertyHolder) ? IPropertyHolder(_email).object : _email);
                output.writeObject((_hi is IPropertyHolder) ? IPropertyHolder(_hi).object : _hi);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_loginName is IPropertyHolder) ? IPropertyHolder(_loginName).object : _loginName);
                output.writeObject((_mrbsSchedules is IPropertyHolder) ? IPropertyHolder(_mrbsSchedules).object : _mrbsSchedules);
                output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
                output.writeObject((_password is IPropertyHolder) ? IPropertyHolder(_password).object : _password);
                output.writeObject((_pods is IPropertyHolder) ? IPropertyHolder(_pods).object : _pods);
                output.writeObject((_roles is IPropertyHolder) ? IPropertyHolder(_roles).object : _roles);
                output.writeObject((_status is IPropertyHolder) ? IPropertyHolder(_status).object : _status);
                output.writeObject((_tel is IPropertyHolder) ? IPropertyHolder(_tel).object : _tel);
                output.writeObject((_viewChoice is IPropertyHolder) ? IPropertyHolder(_viewChoice).object : _viewChoice);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
