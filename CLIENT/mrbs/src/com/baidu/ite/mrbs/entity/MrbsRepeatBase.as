/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (MrbsRepeat.as).
 */

package com.baidu.ite.mrbs.entity {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class MrbsRepeatBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _allday:int;
        private var _createBy:String;
        private var _description:String;
        private var _endDate:Date;
        private var _endHour:String;
        private var _endMini:String;
        private var _id:Number;
        private var _mrbsRoom:MrbsRoom;
        private var _mrbsSchedules:ListCollectionView;
        private var _orderman:String;
        private var _repOpt:int;
        private var _repeatDay:int;
        private var _repeatWeekDay:int;
        private var _startDate:Date;
        private var _startHour:String;
        private var _startMini:String;
        private var _updatetime:Date;
        private var _weekSpan:int;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is MrbsRepeat) || (property as MrbsRepeat).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function set allday(value:int):void {
            _allday = value;
        }
        public function get allday():int {
            return _allday;
        }

        public function set createBy(value:String):void {
            _createBy = value;
        }
        public function get createBy():String {
            return _createBy;
        }

        public function set description(value:String):void {
            _description = value;
        }
        public function get description():String {
            return _description;
        }

        public function set endDate(value:Date):void {
            _endDate = value;
        }
        public function get endDate():Date {
            return _endDate;
        }

        public function set endHour(value:String):void {
            _endHour = value;
        }
        public function get endHour():String {
            return _endHour;
        }

        public function set endMini(value:String):void {
            _endMini = value;
        }
        public function get endMini():String {
            return _endMini;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        public function get id():Number {
            return _id;
        }

        public function set mrbsRoom(value:MrbsRoom):void {
            _mrbsRoom = value;
        }
        public function get mrbsRoom():MrbsRoom {
            return _mrbsRoom;
        }

        public function set mrbsSchedules(value:ListCollectionView):void {
            _mrbsSchedules = value;
        }
        public function get mrbsSchedules():ListCollectionView {
            return _mrbsSchedules;
        }

        public function set orderman(value:String):void {
            _orderman = value;
        }
        public function get orderman():String {
            return _orderman;
        }

        public function set repOpt(value:int):void {
            _repOpt = value;
        }
        public function get repOpt():int {
            return _repOpt;
        }

        public function set repeatDay(value:int):void {
            _repeatDay = value;
        }
        public function get repeatDay():int {
            return _repeatDay;
        }

        public function set repeatWeekDay(value:int):void {
            _repeatWeekDay = value;
        }
        public function get repeatWeekDay():int {
            return _repeatWeekDay;
        }

        public function set startDate(value:Date):void {
            _startDate = value;
        }
        public function get startDate():Date {
            return _startDate;
        }

        public function set startHour(value:String):void {
            _startHour = value;
        }
        public function get startHour():String {
            return _startHour;
        }

        public function set startMini(value:String):void {
            _startMini = value;
        }
        public function get startMini():String {
            return _startMini;
        }

        public function set updatetime(value:Date):void {
            _updatetime = value;
        }
        public function get updatetime():Date {
            return _updatetime;
        }

        public function set weekSpan(value:int):void {
            _weekSpan = value;
        }
        public function get weekSpan():int {
            return _weekSpan;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:MrbsRepeatBase = MrbsRepeatBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._allday, _allday, null, this, 'allday', function setter(o:*):void{_allday = o as int});
               em.meta_mergeExternal(src._createBy, _createBy, null, this, 'createBy', function setter(o:*):void{_createBy = o as String});
               em.meta_mergeExternal(src._description, _description, null, this, 'description', function setter(o:*):void{_description = o as String});
               em.meta_mergeExternal(src._endDate, _endDate, null, this, 'endDate', function setter(o:*):void{_endDate = o as Date});
               em.meta_mergeExternal(src._endHour, _endHour, null, this, 'endHour', function setter(o:*):void{_endHour = o as String});
               em.meta_mergeExternal(src._endMini, _endMini, null, this, 'endMini', function setter(o:*):void{_endMini = o as String});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._mrbsRoom, _mrbsRoom, null, this, 'mrbsRoom', function setter(o:*):void{_mrbsRoom = o as MrbsRoom});
               em.meta_mergeExternal(src._mrbsSchedules, _mrbsSchedules, null, this, 'mrbsSchedules', function setter(o:*):void{_mrbsSchedules = o as ListCollectionView});
               em.meta_mergeExternal(src._orderman, _orderman, null, this, 'orderman', function setter(o:*):void{_orderman = o as String});
               em.meta_mergeExternal(src._repOpt, _repOpt, null, this, 'repOpt', function setter(o:*):void{_repOpt = o as int});
               em.meta_mergeExternal(src._repeatDay, _repeatDay, null, this, 'repeatDay', function setter(o:*):void{_repeatDay = o as int});
               em.meta_mergeExternal(src._repeatWeekDay, _repeatWeekDay, null, this, 'repeatWeekDay', function setter(o:*):void{_repeatWeekDay = o as int});
               em.meta_mergeExternal(src._startDate, _startDate, null, this, 'startDate', function setter(o:*):void{_startDate = o as Date});
               em.meta_mergeExternal(src._startHour, _startHour, null, this, 'startHour', function setter(o:*):void{_startHour = o as String});
               em.meta_mergeExternal(src._startMini, _startMini, null, this, 'startMini', function setter(o:*):void{_startMini = o as String});
               em.meta_mergeExternal(src._updatetime, _updatetime, null, this, 'updatetime', function setter(o:*):void{_updatetime = o as Date});
               em.meta_mergeExternal(src._weekSpan, _weekSpan, null, this, 'weekSpan', function setter(o:*):void{_weekSpan = o as int});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _allday = input.readObject() as int;
                _createBy = input.readObject() as String;
                _description = input.readObject() as String;
                _endDate = input.readObject() as Date;
                _endHour = input.readObject() as String;
                _endMini = input.readObject() as String;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _mrbsRoom = input.readObject() as MrbsRoom;
                _mrbsSchedules = input.readObject() as ListCollectionView;
                _orderman = input.readObject() as String;
                _repOpt = input.readObject() as int;
                _repeatDay = input.readObject() as int;
                _repeatWeekDay = input.readObject() as int;
                _startDate = input.readObject() as Date;
                _startHour = input.readObject() as String;
                _startMini = input.readObject() as String;
                _updatetime = input.readObject() as Date;
                _weekSpan = input.readObject() as int;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_allday is IPropertyHolder) ? IPropertyHolder(_allday).object : _allday);
                output.writeObject((_createBy is IPropertyHolder) ? IPropertyHolder(_createBy).object : _createBy);
                output.writeObject((_description is IPropertyHolder) ? IPropertyHolder(_description).object : _description);
                output.writeObject((_endDate is IPropertyHolder) ? IPropertyHolder(_endDate).object : _endDate);
                output.writeObject((_endHour is IPropertyHolder) ? IPropertyHolder(_endHour).object : _endHour);
                output.writeObject((_endMini is IPropertyHolder) ? IPropertyHolder(_endMini).object : _endMini);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_mrbsRoom is IPropertyHolder) ? IPropertyHolder(_mrbsRoom).object : _mrbsRoom);
                output.writeObject((_mrbsSchedules is IPropertyHolder) ? IPropertyHolder(_mrbsSchedules).object : _mrbsSchedules);
                output.writeObject((_orderman is IPropertyHolder) ? IPropertyHolder(_orderman).object : _orderman);
                output.writeObject((_repOpt is IPropertyHolder) ? IPropertyHolder(_repOpt).object : _repOpt);
                output.writeObject((_repeatDay is IPropertyHolder) ? IPropertyHolder(_repeatDay).object : _repeatDay);
                output.writeObject((_repeatWeekDay is IPropertyHolder) ? IPropertyHolder(_repeatWeekDay).object : _repeatWeekDay);
                output.writeObject((_startDate is IPropertyHolder) ? IPropertyHolder(_startDate).object : _startDate);
                output.writeObject((_startHour is IPropertyHolder) ? IPropertyHolder(_startHour).object : _startHour);
                output.writeObject((_startMini is IPropertyHolder) ? IPropertyHolder(_startMini).object : _startMini);
                output.writeObject((_updatetime is IPropertyHolder) ? IPropertyHolder(_updatetime).object : _updatetime);
                output.writeObject((_weekSpan is IPropertyHolder) ? IPropertyHolder(_weekSpan).object : _weekSpan);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
