/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (MrbsRoom.as).
 */

package com.baidu.ite.mrbs.entity {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class MrbsRoomBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _capacity:Number;
        private var _description:String;
        private var _id:Number;
        private var _mrbsArea:MrbsArea;
        private var _mrbsRepeats:ListCollectionView;
        private var _mrbsSchedules:ListCollectionView;
        private var _mrbsUsers:ListCollectionView;
        private var _roomAdminEmail:String;
        private var _roomName:String;
        private var _sortIndex:String;
        private var _status:String;
        private var _virtualMap:String;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is MrbsRoom) || (property as MrbsRoom).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function set capacity(value:Number):void {
            _capacity = value;
        }
        public function get capacity():Number {
            return _capacity;
        }

        public function set description(value:String):void {
            _description = value;
        }
        public function get description():String {
            return _description;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        public function get id():Number {
            return _id;
        }

        public function set mrbsArea(value:MrbsArea):void {
            _mrbsArea = value;
        }
        public function get mrbsArea():MrbsArea {
            return _mrbsArea;
        }

        public function set mrbsRepeats(value:ListCollectionView):void {
            _mrbsRepeats = value;
        }
        public function get mrbsRepeats():ListCollectionView {
            return _mrbsRepeats;
        }

        public function set mrbsSchedules(value:ListCollectionView):void {
            _mrbsSchedules = value;
        }
        public function get mrbsSchedules():ListCollectionView {
            return _mrbsSchedules;
        }

        public function set mrbsUsers(value:ListCollectionView):void {
            _mrbsUsers = value;
        }
        public function get mrbsUsers():ListCollectionView {
            return _mrbsUsers;
        }

        public function set roomAdminEmail(value:String):void {
            _roomAdminEmail = value;
        }
        public function get roomAdminEmail():String {
            return _roomAdminEmail;
        }

        public function set roomName(value:String):void {
            _roomName = value;
        }
        public function get roomName():String {
            return _roomName;
        }

        public function set sortIndex(value:String):void {
            _sortIndex = value;
        }
        public function get sortIndex():String {
            return _sortIndex;
        }

        public function set status(value:String):void {
            _status = value;
        }
        public function get status():String {
            return _status;
        }

        public function set virtualMap(value:String):void {
            _virtualMap = value;
        }
        public function get virtualMap():String {
            return _virtualMap;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:MrbsRoomBase = MrbsRoomBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._capacity, _capacity, null, this, 'capacity', function setter(o:*):void{_capacity = o as Number});
               em.meta_mergeExternal(src._description, _description, null, this, 'description', function setter(o:*):void{_description = o as String});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._mrbsArea, _mrbsArea, null, this, 'mrbsArea', function setter(o:*):void{_mrbsArea = o as MrbsArea});
               em.meta_mergeExternal(src._mrbsRepeats, _mrbsRepeats, null, this, 'mrbsRepeats', function setter(o:*):void{_mrbsRepeats = o as ListCollectionView});
               em.meta_mergeExternal(src._mrbsSchedules, _mrbsSchedules, null, this, 'mrbsSchedules', function setter(o:*):void{_mrbsSchedules = o as ListCollectionView});
               em.meta_mergeExternal(src._mrbsUsers, _mrbsUsers, null, this, 'mrbsUsers', function setter(o:*):void{_mrbsUsers = o as ListCollectionView});
               em.meta_mergeExternal(src._roomAdminEmail, _roomAdminEmail, null, this, 'roomAdminEmail', function setter(o:*):void{_roomAdminEmail = o as String});
               em.meta_mergeExternal(src._roomName, _roomName, null, this, 'roomName', function setter(o:*):void{_roomName = o as String});
               em.meta_mergeExternal(src._sortIndex, _sortIndex, null, this, 'sortIndex', function setter(o:*):void{_sortIndex = o as String});
               em.meta_mergeExternal(src._status, _status, null, this, 'status', function setter(o:*):void{_status = o as String});
               em.meta_mergeExternal(src._virtualMap, _virtualMap, null, this, 'virtualMap', function setter(o:*):void{_virtualMap = o as String});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _capacity = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _description = input.readObject() as String;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _mrbsArea = input.readObject() as MrbsArea;
                _mrbsRepeats = input.readObject() as ListCollectionView;
                _mrbsSchedules = input.readObject() as ListCollectionView;
                _mrbsUsers = input.readObject() as ListCollectionView;
                _roomAdminEmail = input.readObject() as String;
                _roomName = input.readObject() as String;
                _sortIndex = input.readObject() as String;
                _status = input.readObject() as String;
                _virtualMap = input.readObject() as String;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_capacity is IPropertyHolder) ? IPropertyHolder(_capacity).object : _capacity);
                output.writeObject((_description is IPropertyHolder) ? IPropertyHolder(_description).object : _description);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_mrbsArea is IPropertyHolder) ? IPropertyHolder(_mrbsArea).object : _mrbsArea);
                output.writeObject((_mrbsRepeats is IPropertyHolder) ? IPropertyHolder(_mrbsRepeats).object : _mrbsRepeats);
                output.writeObject((_mrbsSchedules is IPropertyHolder) ? IPropertyHolder(_mrbsSchedules).object : _mrbsSchedules);
                output.writeObject((_mrbsUsers is IPropertyHolder) ? IPropertyHolder(_mrbsUsers).object : _mrbsUsers);
                output.writeObject((_roomAdminEmail is IPropertyHolder) ? IPropertyHolder(_roomAdminEmail).object : _roomAdminEmail);
                output.writeObject((_roomName is IPropertyHolder) ? IPropertyHolder(_roomName).object : _roomName);
                output.writeObject((_sortIndex is IPropertyHolder) ? IPropertyHolder(_sortIndex).object : _sortIndex);
                output.writeObject((_status is IPropertyHolder) ? IPropertyHolder(_status).object : _status);
                output.writeObject((_virtualMap is IPropertyHolder) ? IPropertyHolder(_virtualMap).object : _virtualMap);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
